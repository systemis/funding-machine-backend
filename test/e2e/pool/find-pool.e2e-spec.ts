import { expect } from 'chai';
import * as request from 'supertest';

import { CommonQueryDto } from '../../../src/api-docs/dto/common-query.dto';
import {
  FindPoolDto,
  FindPoolSortOption,
} from '../../../src/pool/dtos/find-pool.dto';
import { PoolEntity, PoolStatus } from '../../../src/pool/entities/pool.entity';
import { TestCase } from '../../types/test-case';
import { TestState } from '../state.suite';
import { testHelper } from '../test-entrypoint.e2e-spec';

async function getAllPoolsFunc(this: any, { req }: TestCase) {
  const app = testHelper.app;
  const state = TestState.get(this);

  // Precondition 1: A valid wallet
  state.keypair = testHelper.createSolanaKeyPair();
  const ownerAddress = state.keypair.walletAddress;
  //
  // Precondition 2: Existing pools in DB, use mock API for dev
  const createMockPoolResp = await request(app.getHttpServer())
    .post(`/api/pool/mock/generate`)
    .query({ ownerAddress });
  expect(createMockPoolResp.status).to.equal(201);

  // Step 1: Call get pools api
  const findPoolResp = await request(app.getHttpServer())
    .get(`/api/pool`)
    .query({ ...req, ownerAddress });
  expect(findPoolResp.statusCode).to.equal(200);
  expect(findPoolResp.body).to.be.an('array');
  expect(findPoolResp.body.length).to.greaterThan(0);
}

describe('Find pool', function () {
  /**
   * Notes:
   * - ownerAddress: generated by each case.
   */
  const testCases: TestCase<
    Partial<CommonQueryDto & FindPoolDto>,
    PoolEntity
  >[] = [
    {
      name: 'Happy case',
      req: {},
    },
    {
      name: 'Get by limit & offset',
      req: { limit: 1, offset: 0 },
    },
    {
      name: 'Get by status',
      req: { statuses: [PoolStatus.ACTIVE] },
    },
    {
      name: 'Search pools',
      req: { search: 'Batch' },
    },
    {
      name: 'Sort by start date',
      req: { sortBy: FindPoolSortOption.DATE_START_DESC },
    },
    {
      name: 'Sort by crated date',
      req: { sortBy: FindPoolSortOption.DATE_CREATED_DESC },
    },
    {
      name: 'Sort by progress asc',
      req: { sortBy: FindPoolSortOption.PROGRESS_ASC },
    },
    {
      name: 'Sort by progress desc',
      req: { sortBy: FindPoolSortOption.PROGRESS_DESC },
    },
  ];
  for (const testCase of testCases) {
    it(testCase.name, async function () {
      await getAllPoolsFunc.bind(this)(testCase);
    });
  }
});
